buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'io.fabric'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

checkstyle {
    toolVersion = "8.7"
}

jacoco {
    toolVersion = '0.8.0'
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
    jcenter()
}

android {
    lintOptions {
        abortOnError false
        xmlReport false
        htmlReport true

        lintConfig rootProject.file('config/lint/lint.xml')
        htmlOutput rootProject.file('reports/lint/lint-result.html')
        xmlOutput rootProject.file('reports/lint/lint-result.xml')

        disable 'MissingTranslation'
    }
    signingConfigs {
        config {
            keyAlias 'AndrewShkrob'
            keyPassword 'AndrewShkrob'
            storeFile rootProject.file('Keystore/AndrewShkrobKeystore.jks')
            storePassword 'AndrewShkrobKeystore'
        }
    }
    compileSdkVersion 26
    defaultConfig {
        applicationId "whiskarek.andrewshkrob"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "5.2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [HOCKEYAPP_APP_ID: "8a4807f5389f43e793a953995c85ae32"]
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            ext.betaDistributionGroupAliases = 'andrew-shkrob'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}


task checkstyle(type: Checkstyle) {
    description 'Checks if the code is somewhat acceptable'
    group 'verification'

    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configProperties.checkstyleSuppressionsPath = rootProject.file('config/checkstyle/suppressions.xml')

    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'

    // empty classpath
    classpath = files()
}

task findbugs(type: FindBugs) {
    description 'Run FindBugs'
    group 'verification'

    ignoreFailures = true
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File('../config/findbugs/findbugs-exclude-filter.xml')
    classes = rootProject.files('app/build/intermediates/classes')

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination rootProject.file('reports/findbugs/findbugs.xml')
        }
        html {
            destination rootProject.file('reports/findbugs/findbugs.html')
        }
    }

    classpath = files()
}

task pmd(type: Pmd) {
    description 'Run PMD'
    group 'verification'

    ruleSetFiles = rootProject.files('config/pmd/pmd-ruleset.xml')
    ruleSets = []
    ignoreFailures = true

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination rootProject.file('reports/pmd/pmd.xml')
        }
        html {
            destination rootProject.file('reports/pmd/pmd.html')
        }
    }
}

afterEvaluate {
    testDebugUnitTest.jacoco.includeNoLocationClasses = true
    task runTestsWithCoverage(type: JacocoReport) {
        description 'Generate JaCoCo coverage reports'
        group 'verification'

        dependsOn(testDebugUnitTest, connectedDebugAndroidTest)
        executionData(fileTree(dir: buildDir, includes: ['**/*.exec' , '**/*.ec']))
        setSourceDirectories(files(new File(projectDir, 'src/main/java')))
        setClassDirectories(fileTree(dir: new File(buildDir, 'intermediates/classes/debug'), exclude: [
                '**/R.class', '**/R$*.class', '**/BuildConfig.*', 'android/**/*.*'
        ]))

        reports {
            xml.enabled = true
            html.enabled = true

            xml {
                destination rootProject.file('reports/jacoco/jacoco.xml')
            }
            html {
                destination rootProject.file('reports/jacoco/jacoco.html')
            }
        }

    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:preference-v14:26.1.0'
    implementation 'com.android.support:preference-v7:26.1.0'
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:support-v4:26.1.0'

    implementation 'com.yandex.android:mobmetricalib:2.80'
    implementation "com.yandex.android:mobmetricapushlib:1.0.0"
    implementation "com.google.firebase:firebase-messaging:11.8.0"
    implementation "com.google.android.gms:play-services-base:11.8.0"
    implementation "com.android.support:support-compat:26.1.0"
    implementation 'com.google.firebase:firebase-core:11.8.0'

    implementation "android.arch.persistence.room:runtime:1.0.0"
    annotationProcessor "android.arch.persistence.room:compiler:1.0.0"

    implementation "android.arch.lifecycle:extensions:1.1.0"

    implementation 'com.facebook.stetho:stetho:1.5.0'

    // ViewPager AnimationLibrary
    implementation 'com.ToxicBakery.viewpager.transforms:view-pager-transforms:1.2.32@aar'

    compile('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true
    }
    implementation 'net.hockeyapp.android:HockeySDK:5.1.0'
    implementation 'org.jetbrains:annotations-java5:15.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.15.0'
    testImplementation 'org.robolectric:robolectric:3.7'
    testImplementation 'org.robolectric:shadows-support-v4:3.3.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.1'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.8.1'
    androidTestImplementation 'org.mockito:mockito-android:2.15.0'
    androidTestImplementation 'android.arch.core:core-testing:1.1.0'
}

apply plugin: 'com.google.gms.google-services'